// Generated by CoffeeScript 1.7.1

/*

Regex Builder

Sep 2013 ys
 */

(function() {
  var $exp, $exp_dsp, $flags, $match, $txt, $window, anchor, anchor_c, clean_paste_text, create_match_ol, create_match_table, delay_id, delay_run_match, entityMap, escape_exp, escape_html, escape_html_exp, exp_escape_list, init, init_bind, init_hide_switches, init_key_events, input_clear, load_data, match_elem_show_tip, match_visual, on_window_resize, override_return, run_match, save_data, select_all_text, syntax_highlight, unescape_exp, update_affix;

  $window = $(window);

  $exp = $('#exp');

  $exp_dsp = $('#exp_dsp');

  $txt = $('#txt');

  $match = $('#match');

  $flags = $('#flags');

  exp_escape_list = ['index', 'input', 'lastIndex'];

  init = function() {
    load_data();
    $window.on('beforeunload', save_data);
    on_window_resize();
    $window.resize(on_window_resize);
    run_match();
    init_key_events();
    init_bind();
    $('[title]').tooltip();
    setTimeout(function() {
      return $exp.select();
    }, 500);
    update_affix();
    return init_hide_switches();
  };

  init_key_events = function() {
    $txt.keydown(override_return);
    $exp.keydown(override_return);
    $txt.keyup(delay_run_match);
    $exp.keyup(delay_run_match);
    $exp.keyup(update_affix);
    $txt[0].addEventListener('paste', clean_paste_text);
    $exp[0].addEventListener('paste', clean_paste_text);
    $flags.keyup(delay_run_match);
    return $exp_dsp.click(select_all_text);
  };

  clean_paste_text = function(e) {
    var text;
    text = e.clipboardData.getData("text/plain");
    document.execCommand("insertHTML", false, escape_html(text));
    return e.preventDefault();
  };

  update_affix = function() {
    var $af, $ap;
    $af = $('.affix');
    $ap = $('.affix-placeholder');
    return $ap.height($af.outerHeight());
  };

  init_bind = function() {
    return $('[bind]').each(function() {
      var $this;
      $this = $(this);
      window[$this.attr('bind')] = $this.val();
      return $this.change(function() {
        return window[$this.attr('bind')] = $this.val();
      });
    });
  };

  init_hide_switches = function() {
    $('.switch_hide').click(function() {
      var $tar, $this;
      $this = $(this);
      $tar = $('#' + $this.attr('target'));
      if ($this.val() === 'on') {
        $this.val('off');
        return $tar.hide();
      } else {
        $this.val('on');
        return $tar.show();
      }
    });
    return $('.switch_hide').each(function() {
      var $this;
      $this = $(this);
      if ($this.val() === 'off') {
        $this.val('on');
        return $this.click();
      }
    });
  };

  on_window_resize = function() {
    if ($window.width() < 768) {
      $('.col-xs-8').removeClass('col-xs-8').addClass('col-xs-12');
      return $('.col-xs-2').removeClass('col-xs-2').addClass('col-xs-6');
    } else {
      $('.col-xs-12').removeClass('col-xs-12').addClass('col-xs-8');
      return $('.col-xs-6').removeClass('col-xs-6').addClass('col-xs-2');
    }
  };

  delay_id = null;

  delay_run_match = function() {
    var elem;
    elem = this;
    clearTimeout(delay_id);
    return delay_id = setTimeout(function() {
      var saved_sel;
      if (elem.id === 'txt' || elem.id === 'exp') {
        saved_sel = saveSelection(elem);
      }
      run_match();
      if (elem.id === 'txt' || elem.id === 'exp') {
        return restoreSelection(elem, saved_sel);
      }
    }, window.exe_delay);
  };

  anchor_c = 0;

  anchor = function(index, j, k) {
    var c;
    c = anchor_c++ % 4;
    switch (c) {
      case 0:
        return "<i index='" + index + "' pos='" + j + " " + k + "'>";
      case 1:
        return "</i>";
      case 2:
        return "<b index='" + index + "' pos='" + j + " " + k + "'>";
      case 3:
        return "</b>";
    }
  };

  entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;"
  };

  escape_html_exp = /[&<>]/g;

  escape_html = function(str) {
    if (!str) {
      return '';
    }
    return str.replace(escape_html_exp, function(s) {
      return entityMap[s];
    });
  };

  select_all_text = function() {
    var range;
    if (document.selection) {
      range = document.body.createTextRange();
      range.moveToElementText(this);
      return range.select();
    } else if (window.getSelection) {
      range = document.createRange();
      range.selectNode(this);
      return window.getSelection().addRange(range);
    }
  };

  override_return = function(e) {
    if (e.keyCode === 13) {
      document.execCommand('insertHTML', false, '\n');
      return false;
    }
  };

  run_match = function() {
    var count, e, exp, flags, i, is_match_shown, is_txt_shown, list, m, ms, pos, r, txt, visual, _i, _len;
    $txt.find('div').remove();
    exp = $exp.text();
    flags = $flags.val();
    txt = $txt.text();
    syntax_highlight(exp, flags);
    if (!exp) {
      input_clear();
      return;
    }
    exp = escape_exp(exp);
    try {
      r = XRegExp(exp, flags);
    } catch (_error) {
      e = _error;
      input_clear(e);
      return;
    }
    ms = [];
    is_txt_shown = $txt.is(":visible");
    is_match_shown = $match.is(":visible");
    pos = 0;
    while (m = XRegExp.exec(txt, r, pos)) {
      m.lastIndex = m.index + m[0].length;
      ms.push(m);
      pos = m.lastIndex;
      if (m[0].length === 0) {
        pos++;
      }
      if (!r.global) {
        break;
      }
    }
    if (is_txt_shown) {
      visual = '';
      i = 0;
      count = 0;
      for (_i = 0, _len = ms.length; _i < _len; _i++) {
        m = ms[_i];
        visual += match_visual(txt, i, m.index, m.lastIndex, count++);
        i = m.lastIndex;
      }
      visual += escape_html(txt.slice(i));
      $txt.empty().html(visual);
      $txt.find('[index]').hover(match_elem_show_tip, function() {
        return $(this).popover('destroy');
      });
    }
    if (is_match_shown) {
      list = create_match_ol(ms);
      return $match.html(list);
    }
  };

  escape_exp = function(exp) {
    var i, _i, _len;
    for (_i = 0, _len = exp_escape_list.length; _i < _len; _i++) {
      i = exp_escape_list[_i];
      exp = exp.replace(new RegExp("\\(\\?<" + i + ">", 'g'), "(?<___" + i + ">");
    }
    return exp;
  };

  unescape_exp = function(name) {
    var i, _i, _len;
    for (_i = 0, _len = exp_escape_list.length; _i < _len; _i++) {
      i = exp_escape_list[_i];
      if (name === '___' + i) {
        return name.slice(3);
      }
    }
    return name;
  };

  match_visual = function(str, i, j, k, c) {
    return escape_html(str.slice(i, j)) + anchor(c, j, k - 1) + escape_html(str.slice(j, k)) + anchor();
  };

  input_clear = function(err) {
    var msg;
    if (err) {
      msg = err.message.replace('Invalid regular expression: ', '');
      $exp_dsp.html("<span class='error'>" + msg + "</span>");
    } else {
      $exp_dsp.text('');
    }
    $match.text('');
    return $txt.text($txt.text());
  };

  syntax_highlight = function(exp, flags) {
    var exp_escaped;
    exp_escaped = exp.replace(/\\\//g, '/').replace(/\//g, '\\/');
    $exp_dsp.text("/" + exp_escaped + "/" + flags);
    exp = RegexColorizer.colorizeText(exp);
    $exp.html(exp + '<br>');
    return $exp.find('[title]').removeAttr('title');
  };

  create_match_ol = function(ms) {
    var es, i, list, _i, _len;
    if (!ms) {
      return '';
    }
    list = '<ol start="0">';
    for (_i = 0, _len = ms.length; _i < _len; _i++) {
      i = ms[_i];
      es = escape_html(i[0]);
      list += "<li><span class='g'>" + es + "</span></li>";
    }
    return list += '</ol>';
  };

  create_match_table = function(m) {
    var es_k, es_v, k, table, v;
    if (!m || !m.hasOwnProperty('index')) {
      return '';
    }
    table = '<table>';
    delete m.input;
    delete m.index;
    for (k in m) {
      v = m[k];
      es_k = unescape_exp(k);
      es_v = escape_html(v);
      table += ("<tr><td class='text-right strong'>" + es_k + ": </td>") + ("<td><span class='g'>" + es_v + "</span></td></tr>");
    }
    return table += '</table>';
  };

  match_elem_show_tip = function() {
    var $this, index, j, k, m, r, _ref;
    $this = $(this);
    index = $this.attr('index');
    _ref = $this.attr('pos').split(' '), j = _ref[0], k = _ref[1];
    r = XRegExp(escape_exp($exp.text()), $flags.val().replace('g', ''));
    m = XRegExp.exec($this.text(), r, 0);
    return $this.popover({
      animation: false,
      html: true,
      title: "Group : <span class='text-primary'>" + index + "</span> Range: <span class='text-primary'>[" + j + ", " + k + "]</span>",
      content: create_match_table(m),
      placement: 'auto'
    }).popover('show');
  };

  save_data = function(e) {
    $('[save]').each(function() {
      var $this, val;
      $this = $(this);
      $this.find('.popover').remove();
      val = $this[$this.attr('save')]();
      return localStorage.setItem($this.attr('id'), val);
    });
    return e.preventDefault();
  };

  load_data = function() {
    return $('[save]').each(function() {
      var $this, v;
      $this = $(this);
      v = localStorage.getItem($this.attr('id'));
      if (v !== null) {
        return $this[$this.attr('save')](v);
      }
    });
  };

  window.share_state = function() {
    var compressed, data, json;
    data = {
      exp: $exp.text(),
      flags: $flags.val(),
      txt: $txt.text()
    };
    json = JSON.stringify(data);
    compressed = LZString.compressToBase64(json);
    return $('#share').val(compressed).select();
  };

  window.apply_state = function() {
    var compressed, data, json;
    compressed = $('#share').val();
    json = LZString.decompressFromBase64(compressed);
    data = JSON.parse(json);
    $exp.text(data.exp);
    $flags.val(data.flags);
    $txt.text(data.txt);
    return run_match();
  };

  
if (window.getSelection && document.createRange) {
    saveSelection = function(containerEl) {
        var range = window.getSelection().getRangeAt(0);
        var preSelectionRange = range.cloneRange();
        preSelectionRange.selectNodeContents(containerEl);
        preSelectionRange.setEnd(range.startContainer, range.startOffset);
        var start = preSelectionRange.toString().length;

        return {
            start: start,
            end: start + range.toString().length
        }
    };

    restoreSelection = function(containerEl, savedSel) {
    	if (!savedSel) return;
        var charIndex = 0, range = document.createRange();
        range.setStart(containerEl, 0);
        range.collapse(true);
        var nodeStack = [containerEl], node, foundStart = false, stop = false;

        while (!stop && (node = nodeStack.pop())) {
            if (node.nodeType == 3) {
                var nextCharIndex = charIndex + node.length;
                if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {
                    range.setStart(node, savedSel.start - charIndex);
                    foundStart = true;
                }
                if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {
                    range.setEnd(node, savedSel.end - charIndex);
                    stop = true;
                }
                charIndex = nextCharIndex;
            } else {
                var i = node.childNodes.length;
                while (i--) {
                    nodeStack.push(node.childNodes[i]);
                }
            }
        }

        var sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
    }
} else if (document.selection && document.body.createTextRange) {
    saveSelection = function(containerEl) {
        var selectedTextRange = document.selection.createRange();
        var preSelectionTextRange = document.body.createTextRange();
        preSelectionTextRange.moveToElementText(containerEl);
        preSelectionTextRange.setEndPoint("EndToStart", selectedTextRange);
        var start = preSelectionTextRange.text.length;

        return {
            start: start,
            end: start + selectedTextRange.text.length
        }
    };

    restoreSelection = function(containerEl, savedSel) {
        var textRange = document.body.createTextRange();
        textRange.moveToElementText(containerEl);
        textRange.collapse(true);
        textRange.moveEnd("character", savedSel.end);
        textRange.moveStart("character", savedSel.start);
        textRange.select();
    };
}
;

  init();

}).call(this);
